{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","key","GifApp","categorias","c","ReactDOM","render","document","getElementById"],"mappings":"qMAqCeA,EAlCK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAGJC,mBAAS,IAHL,mBAGjCC,EAHiC,KAGrBC,EAHqB,KAmBxC,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAa,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,OAOd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAnBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,Y,uBCTdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,kGACkFC,UAAUH,IAD5F,SAGHI,MAAMF,GAHH,cAGfG,EAHe,gBAIEA,EAAIC,OAJN,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCaLO,EAXK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC/B,OACE,yBAAKc,UAAU,0CACb,yBACEC,IAAKf,EACLgB,IAAKN,OCqBEO,EAxBC,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECDP,SAACA,GAAe,IAAD,EACfd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH8B,mBAClCC,EADkC,KAC3BC,EAD2B,KAkBzC,OAZAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAM,SAAAjB,GACLkB,YAAW,WACTH,EAAS,CACPf,KAAMA,EACNa,SAAS,MAEV,UAEN,CAACpB,IAEGqB,EDdyBK,CAAa1B,GAAhCa,EAHoB,EAG1BN,KAAca,EAHY,EAGZA,QAErB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAEjDoB,GAAW,uBAAGJ,UAAU,oCAAb,eAEb,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eACEiB,IAAKjB,EAAIC,IACLD,UEmBDkB,EAlCA,WAAM,MAIgB1C,mBAAS,CAC1C,cALiB,mBAIZ2C,EAJY,KAIA5C,EAJA,KAcnB,OACE,oCACE,8CAEA,kBAAC,EAAD,CAAaA,aAAcA,IAE3B,6BAEA,4BACI4C,EAAWpB,KAAK,SAAAqB,GAChB,OAAO,kBAAC,EAAD,CACLH,IAAKG,EACL9B,UAAW8B,WCzBvBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.d002ff3f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategoria }) => {\r\n  \r\n  // Estados \r\n  const [inputValue, setInputValue] = useState('');\r\n  \r\n  const handleInputValue = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if(inputValue.trim().length > 2) {\r\n      setCategoria(cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputValue}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategoria: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (categoria) => {\r\n  const url = `http://api.giphy.com/v1/gifs/search?api_key=RuLBOmXSEY5rCfTT2sEEWcHSaIC737EN&limit=10&q=${encodeURI(categoria)}`;\r\n\r\n  const res = await fetch(url);\r\n  const { data } = await res.json();\r\n\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img\r\n        src={url}\r\n        alt={title} \r\n      ></img>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ categoria }) => {\r\n  // const apiKey = 'RuLBOmXSEY5rCfTT2sEEWcHSaIC737EN';\r\n\r\n  const {data: images, loading} = useFetchGifs(categoria);\r\n  \r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__bounce\">{categoria}</h3>\r\n\r\n      { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map(img => (          \r\n          <GifGridItem \r\n            key={img.id} \r\n            {...img}\r\n            />\r\n        ))}\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(categoria)\r\n      .then( data => {\r\n        setTimeout(() => {\r\n          setstate({\r\n            data: data,\r\n            loading: false\r\n          });\r\n        }, 3000);\r\n      });\r\n  }, [categoria]);\r\n\r\n  return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifApp = () => {\r\n\r\n  // const categorias = ['One Punch', 'Samurai X', 'Naruto'];\r\n\r\n  const [categorias, setCategoria] = useState([\r\n    'One Punch'\r\n  ]);\r\n\r\n  // const handleAdd = () => {\r\n  //   const newValue = 'Hunter X Hunter';\r\n  //   // setCategoria([...categorias, newValue]);\r\n  //   setCategoria(cats => [...cats, newValue]);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n\r\n      <AddCategory setCategoria={setCategoria}/>\r\n\r\n      <hr/>\r\n\r\n      <ol>\r\n        { categorias.map( c => {\r\n          return <GifGrid \r\n            key={c} \r\n            categoria={c} />\r\n        }) }\r\n      </ol>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifApp from './GifApp';\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}